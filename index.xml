<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>© 2023 Zihao Shu</copyright>
    <lastBuildDate>Tue, 02 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tax4Fun2使用方法</title>
      <link>/articles/tax4fun2/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/articles/tax4fun2/</guid>
      <description>Tax4Fun2参数详细介绍 Tax4Fun2只需一个依赖：
BLAST（可以通过buildDependencies()命令安装） 为用到所有的函数，可能需要额外安装一些包
R包seqinr和ape（可以通过buildDependencies()命令安装）
功能注释需要用到Diamond（Mac用户需要自己编译）
在v1.1.5版本中，Tax4Fun2使用vsearch进行序列聚类。
安装Tax4Fun2，构建默认参考数据和安装所有依赖项 下载及安装Tax4Fun2
点击这里下载R包或者在终端中运行 wget https://github.com/ZihaoShu/Tax4Fun2/raw/main/Tax4Fun2_1.1.5.tar.gz 安装Tax4Fun2 install.packages(pkgs = &amp;#34;Tax4Fun2_1.1.5.tar.gz&amp;#34;, repos = NULL, source = TRUE) 加载Tax4Fun2 library(Tax4Fun2) 构建默认参考数据库 使用buildReferenceData()命令将下载并构建默认的Tax4Fun2参考数据库，也可以一同安装R包ape和seqinr。此外还会测试路径中是否存在blast。为了确保下载成功，该函数还将使用me5sum自动检查下载数据的一致性。
选项：
path_to_working_directory = &amp;quot;.&amp;quot; &amp;gt; Tax4Fun2的安装路径（默认安装在当前工作目录）
use_force = FALSE &amp;gt; 如果存在则覆盖文件夹（默认为FALSE）
install_suggested_packages = TRUE &amp;gt; 安装R包ape和seqinr（默认为TRUE）
buildReferenceData(path_to_working_directory = &amp;#34;.&amp;#34;, use_force = FALSE, install_suggested_packages = TRUE) 工作路径和参考数据路径不同！！！
例如：
工作路径：&amp;ldquo;C:/Users/your_name/Desktop/Tax4Fun2&amp;rdquo;
参考数据路径：&amp;ldquo;C:/Users/your_name/Desktop/Tax4Fun2/Tax4Fun2_ReferenceData_v2&amp;rdquo;
由于在windows中unzip命令存在一些问题，有的数据被下载了但无法解压。若存在这些问题请点击这里来下载完整的参考数据。然后在终端中提取数据并检查数据的一致性：
# 1) 下载数据 wget -O RefData.zip https://cloudstor.aarnet.edu.au/plus/s/OoKjFHWmyKcc48V/download # 2）解压数据 unzip RefData.zip 检查数据的一致性
testReferenceData(path_to_reference_data = &amp;#34;Tax4Fun2_ReferenceData_v2&amp;#34;) 安装依赖</description>
    </item>
    
    <item>
      <title>ANOVA</title>
      <link>/articles/anova/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/anova/</guid>
      <description>介绍 方差分析（ANOVA）是一种用于确定两个或多个总体均值之间是否存在不同的统计检验，即用于比较两个或多个组之间是否存在显著性差异。
t检验（t-test）用于比较两组 ANOVA将t-test推广到两组之外，用于比较三组或多组 方差分析有多种版本(如：单因素方差分析（one-way ANOVA）、双因素方差分析（two-way ANOVA）、混合方差分析（mixed ANOVA）、重复测量方差分析（repeated measures ANOVA）等)。在本文中，我们只介绍最简单的形式ーー单因素方差分析(one-way ANOVA) ，并在本文的其余部分称之为方差分析(ANOVA)。
方差分析通过比较组间方差（between）和组内方差（within）来推断不同组别的均值是否存在显著性差异，如果组间方差大于组内方差，则表明两组之间的均值存在差异，然后计算组内和组件方差之间的比率（$\frac{variance_{between}}{variance_{within}}$），将该比率与Fisher概率分布的阈值（基于特定显著性水平的阈值，通常为5%）进行比较，来得出两组之间的均值的差异是否显著。
在本文以下的内容中涵盖以下几点：
方差分析的目的，什么时候应该使用零和替代假设。
方差分析的基本假设，以及如何检验
如何在R中进行方差分析
如何解释方差分析的结果
理解事后检验的概念并解释检验结果
可视化方差分析的结果和事后检验
数据 示例数据为palmerpenguins包中的penguins数据
# install.packages(&amp;quot;palmerpenguins&amp;quot;)library(palmerpenguins)该数据集包含3个不同物种（Adelie, chinstrap和Gentoo）的344只企鹅数据。数据集包含8个变量，但我们只关注鳍的长度和种类这两个变量：
library(tidyverse)## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──## ✔ ggplot2 3.4.2 ✔ purrr 1.0.1## ✔ tibble 3.2.1 ✔ dplyr 1.1.2## ✔ tidyr 1.2.1 ✔ stringr 1.4.1## ✔ readr 2.1.3 ✔ forcats 0.5.2## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──## ✖ dplyr::filter() masks stats::filter()## ✖ dplyr::lag() masks stats::lag()dat &amp;lt;- penguins %&amp;gt;%select(species, flipper_length_mm)在进行方差分析之前应先进行一些基本的描述性统计数据分析：</description>
    </item>
    
    <item>
      <title>Math Braintrainer</title>
      <link>/projects/math-brain-trainer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/math-brain-trainer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Surprise Surprise</title>
      <link>/articles/article/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/article/</guid>
      <description>Thank you for your support! Hello. If you like this template, I&amp;rsquo;d be happy to get a coffee donation :)</description>
    </item>
    
    <item>
      <title>显著性检验</title>
      <link>/articles/%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/%E6%98%BE%E8%91%97%E6%80%A7%E6%A3%80%E9%AA%8C/</guid>
      <description># 舒子豪 # 2022/06/09 # 在使用前请先运行source(&amp;#34;func_anova.r&amp;#34;,encoding = &amp;#34;utf-8&amp;#34;)将该函数调入 # 使用shapiro.test()及bartlett.test()函数对数据的正态性及方差齐性进行检验 # 满足正态性及方差齐性之后使用agricolae包中的HSD.test()函数对ano()计算结果进行汇总统计， # 默认是进行正态性及方差检验之后再进行显著性检验，考虑到样本量的问题加入ignore = TRUE参数,可直接进行显著性检验 # 参数意义：data——导入数据,Groupname——分组变量,element——进行显著性分析的元素名称,value——进行显著性分析的观测数据 func_anova &amp;lt;- function(data,Groupname,element,value,ignore = FALSE){ require(agricolae) require(tidyverse) names(data)[names(data) == Groupname] = &amp;#34;Group&amp;#34; names(data)[names(data) == value] = &amp;#34;value&amp;#34; names(data)[names(data) == element] = &amp;#34;element&amp;#34; if(ignore == FALSE){ shapiro = data %&amp;gt;% group_by(Group) %&amp;gt;% summarise(p_value = shapiro.test(value)[[2]]) %&amp;gt;% #检验数据是否符合正态分布 mutate(score = (p_value-0.05)/abs(p_value-0.05)) #若得分为-1或NaN则为该组数据不符合 if(sum(shapiro$score) != length(shapiro[[1]])){ print(&amp;#34;数据不符合正态性&amp;#34;) shapiro }else{ p_norm = bartlett.test(value ~ Group,data)[[3]] #检验方差齐性 if(p_norm &amp;lt; 0.</description>
    </item>
    
  </channel>
</rss>
